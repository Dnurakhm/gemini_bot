import os
import google.generativeai as genai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
)

# –ö–ª—é—á–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("models/gemini-2.0-flash")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SELECT_ENTITY, ENTER_EMP_COUNT, ENTER_EMP_SALARIES, ENTER_REVENUE = range(4)
user_data = {}
user_contexts = {}

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã", callback_data="calculators")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å (—á–∞—Ç —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –ò–ò)", callback_data="help")]
    ])

def back_menu():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]])

PROMPT_TEMPLATE = """
–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä –≤ –æ–Ω–ª–∞–π–Ω-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –ò–ü –∏ –¢–û–û –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. –û—Ç–≤–µ—á–∞–π –ø–æ –¥–µ–ª—É, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:
{history}

–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_question}

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–µ–π, –Ω–∞–ª–æ–≥–∞–º–∏, –æ—Ç—á—ë—Ç–∞–º–∏ –∏–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å.
"""

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_contexts[update.effective_user.id] = []
    if update.message:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())
    else:
        await update.callback_query.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "menu":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

    elif query.data == "calculators":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üßæ –ù–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="tax_calc")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:", reply_markup=keyboard)

    elif query.data == "tax_calc":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ò–ü", callback_data="tax_entity_IP"),
             InlineKeyboardButton("–¢–û–û –Ω–∞ —É–ø—Ä–æ—â–µ–Ω–∫–µ", callback_data="tax_entity_TOO")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="calculators")]
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞:", reply_markup=keyboard)

    elif query.data.startswith("tax_entity_"):
        user_id = query.from_user.id
        entity = query.data.split("_")[-1]
        user_data[user_id] = {"entity": entity, "salaries": []}
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:")
        context.user_data["next_state"] = ENTER_EMP_COUNT

    elif query.data == "help":
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É!", reply_markup=back_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏ Gemini)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    state = context.user_data.get("next_state")
    if state == ENTER_EMP_COUNT:
        try:
            emp_count = int(text)
            user_data[user_id]["emp_count"] = emp_count
            user_data[user_id]["salaries"] = []
            context.user_data["salary_index"] = 1
            context.user_data["next_state"] = ENTER_EMP_SALARIES
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ 1:")
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    elif state == ENTER_EMP_SALARIES:
        try:
            salary = float(text)
            user_data[user_id]["salaries"].append(salary)
            idx = context.user_data["salary_index"]
            if idx < user_data[user_id]["emp_count"]:
                context.user_data["salary_index"] += 1
                await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {idx+1}:")
            else:
                context.user_data["next_state"] = ENTER_REVENUE
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É (—Ç–≥):")
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    elif state == ENTER_REVENUE:
        try:
            revenue = float(text)
            data = user_data[user_id]
            salaries = data["salaries"]
            entity = data["entity"]
            result = [f"–¢–∏–ø: {entity}", f"–í—ã—Ä—É—á–∫–∞: {revenue:,.0f} —Ç–≥", f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(salaries)}"]

            tax = revenue * 0.03
            result.append(f"\n–ù–∞–ª–æ–≥ (3%): {tax:,.0f} —Ç–≥")
            total_contrib = 0

            for i, salary in enumerate(salaries, 1):
                opv = salary * 0.1
                vosms = salary * 0.02
                ipn = (salary - opv - 55048 - vosms) * 0.1
                so = (salary - opv) * 0.05
                osms = salary * 0.03
                opvr = salary * 0.025
                subtotal1 = opvr + osms + so
                subtotal2 = opv + ipn + vosms
                salarynetto = salary - subtotal2
                total_contrib += subtotal1 + subtotal2
                result.append(
                    f"\n–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {i}:\n**–ó–∞ —Å—á–µ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è**\n –û–ü–í–†: {opvr:,.0f}\n –û–û–°–ú–°: {osms:,.0f}\n –°–û: {so:,.0f}\n**–í—Å–µ–≥–æ –∑–∞ —Å—á–µ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:** {subtotal1:,.0f} —Ç–≥\n**–ó–∞ —Å—á–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞** \n –û–ü–í: {opv:,.0f}\n –ò–ü–ù: {ipn:,.0f}\n –í–û–°–ú–°: {vosms:,.0f}\n**–í—Å–µ–≥–æ –∑–∞ —Å—á–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:** {subtotal2:,.0f} —Ç–≥ \n**–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–∞ —Ä—É–∫–∏** {salarynetto:,.0f}"
                )

            total = tax + total_contrib
            result.append(f"\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total:,.0f} —Ç–≥")

            await update.message.reply_text("\n".join(result), reply_markup=back_menu())
            context.user_data.clear()
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    # –ß–∞—Ç —Å Gemini
    history = user_contexts.setdefault(user_id, [])
    history.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {text}")
    history = history[-5:]
    prompt = PROMPT_TEMPLATE.format(history="\n".join(history), user_question=text)

    try:
        response = model.generate_content(prompt)
        answer = response.text.strip()
        history.append(f"–ë–æ—Ç: {answer}")
        user_contexts[user_id] = history[-5:]
        await update.message.reply_text(answer, reply_markup=back_menu())
    except Exception as e:
        print("Gemini error:", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(menu_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()


if __name__ == "__main__":
    main()
